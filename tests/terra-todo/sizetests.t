local errors = 0

-- compare ffi's sizeof with the element offset generated by LLVM
local function assert_size(basetype)
    local ffi_size = terralib.sizeof(basetype)
    local intp = &int
    local terra get_size () : int
        var k : &basetype = nil
        var o = k + 1
        return @(intp(&o))
    end
    local llvm_size = get_size()
    if (ffi_size ~= llvm_size) then
        errors = errors + 1
        print(("%s: size mismatch: %s != %s"):format(tostring(basetype), ffi_size, llvm_size))
    end
end

-- compare ffi's offsetof with the member offset generated by LLVM
local function assert_offset(basetype, name)
    local ffi_offset = terralib.offsetof(basetype, name)
    local intp = &int
    local terra get_offset () : int
        var k : &basetype = nil
        var o = &k.[name]
        return @(intp(&o))
    end
    local llvm_offset = get_offset()
    if (ffi_offset ~= llvm_offset)  then
        errors = errors + 1
        print(("%s.%s: offset mismatch: %s != %s"):format(tostring(basetype), name, ffi_offset, llvm_offset))
    end
end

local struct Reference {
    v1 : uint32;
    v2 : uint32;
    v3 : float;
    v4 : uint32;
}

-- all fine
assert_size(Reference)
assert_offset(Reference, "v1")
assert_offset(Reference, "v2")
assert_offset(Reference, "v3")
assert_offset(Reference, "v4")

local struct Entry {
    key : uint8;
    value : uint64;
}

-- fails: "Entry: size mismatch: 16 != 12"
assert_size(Entry)
assert_offset(Entry, "key")
-- fails: "Entry.value: offset mismatch: 8 != 4"
assert_offset(Entry, "value")

local struct Map {
    count : uint;
    map : Entry[1024];
    mask : uint;
}

-- fails: "Map: size mismatch: 16400 != 12296"
assert_size(Map)
assert_offset(Map, "count")
-- fails: "Map.map: offset mismatch: 8 != 4"
assert_offset(Map, "map")
-- fails: Map.mask: offset mismatch: 16392 != 12292
assert_offset(Map, "mask")

local struct MetaMap {
    count : uint;
    map : Map;
    actors : uint64[10000];
}

-- fails: "MetaMap: size mismatch: 96408 != 92300"
assert_size(MetaMap)
assert_offset(MetaMap, "count")
-- fails: "MetaMap.map: offset mismatch: 8 != 4"
assert_offset(MetaMap, "map")
-- fails: "MetaMap.actors: offset mismatch: 16408 != 12300"
assert_offset(MetaMap, "actors")

assert(errors == 0, ("%i errors occurred"):format(errors))